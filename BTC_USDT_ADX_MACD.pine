// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© arminkheirkhahan

//@version=4
strategy("ADX_MACD", overlay=true, margin_long=3, margin_short=3,initial_capital=30, 
     commission_type=strategy.commission.percent, 
     commission_value=0.1,currency=currency.USD,pyramiding=1)



// Date 
start_date =  input(title="Start Date", type=input.time,  group="TIME RANGE", defval=timestamp("01 Jan 2020 00:00 +0300"))
end_date =  input(title="End Date", type=input.time, group="TIME RANGE", defval=timestamp("01 Jan 2022 00:00 +0300"))
isDate = time >= start_date and time <= end_date  

// ORDER SIZE SETTINGS
order_size = input(title="Order Size", group="ORDER SIZE SETTINGS", type=input.integer,inline = "Highlight", defval=20)
order_mode = input(title="",group="ORDER SIZE SETTINGS", options=["% of equality","cash"],inline = "Highlight", defval="cash")

// ATR SETTINGS
atr_length = input(title="ATR Length", group="ATR SETTINGS", type=input.integer, defval=14)
atr_value = rma(tr(true), atr_length)

// POSITION EXIT SETTINGS
take_profit_multiple = input(title="Take Profit Percentage Multiplier (Reward)", group="POSITION EXIT SETTINGS", type=input.integer, defval=13)
stop_loss_multiple = input(title="Stop Loss Percentage Multiplier (Risk)", group="POSITION EXIT SETTINGS", type=input.integer, defval=7)

// ADX
len = input(title="ADX Length", type=input.integer, defval=2)
TrueRange = max(max(high-low, abs(high-nz(close[1]))), abs(low-nz(close[1])))
DirectionalMovementPlus = high-nz(high[1]) > nz(low[1])-low ? max(high-nz(high[1]), 0): 0
DirectionalMovementMinus = nz(low[1])-low > high-nz(high[1]) ? max(nz(low[1])-low, 0): 0

SmoothedTrueRange = TrueRange
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - (nz(SmoothedTrueRange[1])/len) + TrueRange
SmoothedDirectionalMovementPlus = DirectionalMovementPlus
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - (nz(SmoothedDirectionalMovementPlus[1])/len) + DirectionalMovementPlus
SmoothedDirectionalMovementMinus = DirectionalMovementMinus
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - (nz(SmoothedDirectionalMovementMinus[1])/len) + DirectionalMovementMinus
DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100


// MACD
fast_length = input(title="Fast Length", type=input.integer, defval=10)
slow_length = input(title="Slow Length", type=input.integer, defval=24)
signal_length = input(title="Signal Smoothing", type=input.integer, minval = 1, maxval = 50, defval = 3)
fast_ma =  ema(close, fast_length)
slow_ma =  ema(close, slow_length)
macd = fast_ma - slow_ma
signal = ema(macd, signal_length)

// EMA
ema_length = input(title="EMA", type=input.integer, defval=200)
ema_val = ema(close, ema_length)
plot(ema_val, color = color.red)
long_position_condition = DIPlus > DIMinus and crossover(macd,signal) and macd < 0 and close > ema_val 
short_position_condition = DIMinus > DIPlus and crossunder(macd,signal) and macd > 0 and close < ema_val  


// LONG STRATEGY
if (long_position_condition and isDate)
    strategy.entry("long", strategy.long,order_size/close, limit=close)
    take_profit_price = close * (100+take_profit_multiple)/100
    stop_loss_price = close * (100-stop_loss_multiple)/100
    strategy.exit("exit", "long", limit=take_profit_price,stop= stop_loss_price)


// SHORT STRATEGY 
if (short_position_condition and isDate)
    strategy.entry("short", strategy.short,order_size/close, limit=close)
    take_profit_price = close * (100-take_profit_multiple)/100
    stop_loss_price = close * (100+stop_loss_multiple)/100
    strategy.exit("exit", "short", limit=take_profit_price,stop= stop_loss_price)

