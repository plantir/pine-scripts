// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© arminkheirkhahan

//@version=4
strategy("3EMA Stocahstic ATR", overlay=true, margin_long=10, margin_short=10)

ep = 0.0
ep := na(ep[1]) ? na : ep[1]

// ABOUT
version = input(title="Version", group="ABOUT", options=["1.0.0","2.0.0"], defval="1.0.0")

// Date 
start_date =  input(title="Start Date", type=input.time,  group="TIME RANGE", defval=timestamp("14 May 2021 00:00 +0300"))
end_date =  input(title="End Date", type=input.time, group="TIME RANGE", defval=timestamp("14 Jun 2021 00:00 +0300"))

dateRange = time >= start_date and time <= end_date  
    
// CURRENCY SETTING
base_currency = input(title="Base Currency", group="CURRENCY SETTINGS", options=["Default"], defval="Default")
exchange_rate = input(title="Exchange Rate", group="CURRENCY SETTINGS", type=input.float, defval=1)

// EMA SETTINGS
fast_ema_length = input(title="Fast Ema Length", group="EMA SETTINGS", type=input.integer, defval=8)
medium_ema_length = input(title="Medium Ema Length", group="EMA SETTINGS", type=input.integer, defval=14)
slow_ema_length = input(title="Slow Ema Length", group="EMA SETTINGS", type=input.integer, defval=50)

// STOCHASTIC SETTINGS
fast_stothastic = input(title="K (Stochastic Fast)", group="STOCHASTIC RSI SETTINGS", type=input.integer, defval=3)
signal_line = input(title="D (Signal Line)", group="STOCHASTIC RSI SETTINGS", type=input.integer, defval=3)
rsi_length = input(title="RSI Length", group="STOCHASTIC RSI SETTINGS", type=input.integer, defval=14)
stotachastic_length = input(title="Stotachastic Length", group="STOCHASTIC RSI SETTINGS", type=input.integer, defval=14)
rsi_source = input(title="RSI Source", group="STOCHASTIC RSI SETTINGS", type=input.source, defval=close)
rsi_upper = input(title="Stochastic RSI Upper Band", group="STOCHASTIC RSI SETTINGS", type=input.integer, defval=50)
rsi_lower = input(title="Stochastic RSI Lower Band", group="STOCHASTIC RSI SETTINGS", type=input.integer, defval=50)

// ATR SETTINGS
atr_length = input(title="ATR Length", group="ATR SETTINGS", type=input.integer, defval=14)

// POSITION EXIT SETTINGS
stop_loss_multiple = input(title="Stop Loss ATR Multiplier (Risk)", group="POSITION EXIT SETTINGS", type=input.integer, defval=3)
take_profit_multiple = input(title="Take Profit ATR Multiplier (Reward)", group="POSITION EXIT SETTINGS", type=input.integer, defval=2)

// ORDER SIZE SETTINGS
order_size = input(title="Order Size", group="ORDER SIZE SETTINGS", type=input.integer,inline = "Highlight", defval=100)
order_mode = input(title="",group="ORDER SIZE SETTINGS", options=["% of equality","cash"],inline = "Highlight", defval="cash")

slow_ema = ema(close, slow_ema_length)
medium_ema = ema(close, medium_ema_length)
fast_ema = ema(close, fast_ema_length)

first_buy_condition = slow_ema < medium_ema ? (medium_ema < fast_ema ? true: false):false
plot(slow_ema, title="Slow EMA", color=color.yellow, linewidth=2)
plot(medium_ema, title="Medium EMA", color=color.blue, linewidth=2)
plot(fast_ema, title="Fast EMA", color=color.green, linewidth=2)

k = sma(stoch(close, high, low, stotachastic_length), fast_stothastic)
d = sma(k, signal_line)

second_buy_condition = crossover(k,d)

buy_condition = first_buy_condition and second_buy_condition
atr_value = rma(tr(true), atr_length)

if (buy_condition and dateRange)
    ep := close
    strategy.entry("long", strategy.long,order_size/close, limit=close)
    take_profit_price = ep + (atr_value * take_profit_multiple)
    stop_loss_price = ep - (atr_value * stop_loss_multiple)
    strategy.exit("exit", "long", limit=take_profit_price,stop= stop_loss_price)

